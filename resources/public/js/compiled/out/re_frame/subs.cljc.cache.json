["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.subs","~:imports",null,"~:requires",["^ ","~$re-frame.db","^7","~$re-frame.interop","^8","~$re-frame.loggers","^9","~$re-frame.utils","^:","~$re-frame.registrar","^;"],"~:uses",["^ ","~$console","^9","~$app-db","^7","~$add-on-dispose!","^8","~$make-reaction","^8","~$get-handler","^;","~$first-in-vector","^:","~$deref?","^8","~$ratom?","^8","~$debug-enabled?","^8","~$clear-handlers","^;","~$register-handler","^;"],"~:defs",["^ ","~$cache-and-return",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","~:line",33,"~:column",7,"~:end-line",33,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^R",[["~$query-v","~$dynv","~$r"]]]]],"~:doc","cache the reaction r"],"^3","~$re-frame.subs/cache-and-return","~:variadic",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",23,"~:method-params",["^R",[["^T","^U","~$r"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^N",1,"^M",33,"^O",33,"~:max-fixed-arity",3,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T","^U","~$r"]]]]],"^V","cache the reaction r"],"~$deref-input-signals",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",93,"^N",8,"^O",93,"^P",27,"~:private",true,"^Q",["^R",["^S",["^R",[["~$signals","~$query-id"]]]]]],"^13",true,"^3","~$re-frame.subs/deref-input-signals","^X",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",27,"^Y",["^R",[["^14","^15"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^M",93,"^O",93,"^10",2,"^11",true,"^Q",["^R",["^S",["^R",[["^14","^15"]]]]]],"~$subscribe",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",53,"^N",7,"^O",53,"^P",16,"^Q",["^R",["^S",["^R",[["^T"],["~$v","^U"]]]]],"^V","Returns a Reagent/reaction which contains a computation","~:top-fn",["^ ","^X",false,"^10",2,"^Y",["^R",[["^T"],["~$v","^U"]]],"^Q",["^R",[["^T"],["~$v","^U"]]],"^[",["^R",[null,null]]]],"^3","~$re-frame.subs/subscribe","^X",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",16,"^18",["^ ","^X",false,"^10",2,"^Y",["^R",[["^T"],["~$v","^U"]]],"^Q",["^R",[["^T"],["~$v","^U"]]],"^[",["^R",[null,null]]],"^Y",["^R",[["^T"],["~$v","^U"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^M",53,"^O",53,"^10",2,"^11",true,"^Q",["^R",[["^T"],["~$v","^U"]]],"^V","Returns a Reagent/reaction which contains a computation"],"~$reg-sub",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",102,"^N",7,"^O",102,"^P",14,"^Q",["^R",["^S",["^R",[["^15","~$&","~$args"]]]]],"^V","Register a given handler function for a given query id.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation fucntion, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  ","^18",["^ ","^X",true,"^10",1,"^Y",[["^R",["^15","^1;"]]],"^Q",["^R",[["^15","~$&","^1;"]]],"^[",["^R",[null]]]],"^3","~$re-frame.subs/reg-sub","^X",true,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",14,"^18",["^ ","^X",true,"^10",1,"^Y",[["^R",["^15","^1;"]]],"^Q",["^R",[["^15","~$&","^1;"]]],"^[",["^R",[null]]],"^Y",[["^R",["^15","^1;"]]],"^Z",null,"^[",["^R",[null]],"^N",1,"^M",102,"^O",102,"^10",1,"^11",true,"^Q",["^R",[["^15","~$&","^1;"]]],"^V","Register a given handler function for a given query id.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation fucntion, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  "],"~$query->reaction",["^ ","^3","~$re-frame.subs/query->reaction","^L","resources/public/js/compiled/out/re_frame/subs.cljc","^M",25,"^N",1,"^O",25,"^P",21,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",25,"^N",6,"^O",25,"^P",21]],"~$register-raw",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",14,"^N",7,"^O",14,"^P",19,"^Q",["^R",["^S",["^R",[["^15","~$handler-fn"]]]]],"^V","Register a subscription handler fucntion for an query id"],"^3","~$re-frame.subs/register-raw","^X",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",19,"^Y",["^R",[["^15","^1@"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^M",14,"^O",14,"^10",2,"^11",true,"^Q",["^R",["^S",["^R",[["^15","^1@"]]]]],"^V","Register a subscription handler fucntion for an query id"],"~$clear-all-handlers!",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",27,"^N",7,"^O",27,"^P",26,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Unregisters all existing subscription handlers"],"^3","~$re-frame.subs/clear-all-handlers!","^X",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",26,"^Y",["^R",[[]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^M",27,"^O",27,"^10",0,"^11",true,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",44,"^N",7,"^O",44,"^P",19,"^Q",["^R",["^S",["^R",[["^T"],["^T","~$dyn-v"]]]]],"^18",["^ ","^X",false,"^10",2,"^Y",["^R",[["^T"],["^T","^1E"]]],"^Q",["^R",[["^T"],["^T","^1E"]]],"^[",["^R",[null,null]]]],"^3","~$re-frame.subs/cache-lookup","^X",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",19,"^18",["^ ","^X",false,"^10",2,"^Y",["^R",[["^T"],["^T","^1E"]]],"^Q",["^R",[["^T"],["^T","^1E"]]],"^[",["^R",[null,null]]],"^Y",["^R",[["^T"],["^T","^1E"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^M",44,"^O",44,"^10",2,"^11",true,"^Q",["^R",[["^T"],["^T","^1E"]]]],"~$map-vals",["^ ","^J",null,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",86,"^N",8,"^O",86,"^P",16,"^13",true,"^Q",["^R",["^S",["^R",[["~$f","~$m"]]]]],"^V","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^13",true,"^3","~$re-frame.subs/map-vals","^X",false,"^L","resources/public/js/compiled/out/re_frame/subs.cljc","^P",16,"^Y",["^R",[["~$f","~$m"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^M",86,"^O",86,"^10",2,"^11",true,"^Q",["^R",["^S",["^R",[["~$f","~$m"]]]]],"^V","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^3","~$re-frame.subs/kind","^L","resources/public/js/compiled/out/re_frame/subs.cljc","^M",11,"^N",1,"^O",11,"^P",10,"^K",["^ ","^L","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/subs.cljc","^M",11,"^N",6,"^O",11,"^P",10]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:else","~:sub","~:warn","~:error"]],"~:order",["^1O","^1Q","^1P","^1N"]],"^V",null]