["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:imports",null,"~:requires",["^ ","~$re-frame.interceptor","^7","~$re-frame.loggers","^8","~$registrar","~$re-frame.registrar","^:","^:","~$re-frame.db","^;","~$data","~$clojure.data","^=","^="],"~:uses",["^ ","~$console","^8","~$assoc-coeffect","^7","~$app-db","^;","~$get-effect","^7","~$->interceptor","^7","~$get-coeffect","^7","~$assoc-effect","^7"],"~:defs",["^ ","~$debug",["^ ","^3","~$re-frame.std-interceptors/debug","~:file","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","~:line",15,"~:column",1,"~:end-line",15,"~:end-column",11,"~:meta",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",15,"^K",6,"^L",15,"^M",11],"~:doc","An interceptor which logs data about the handling of an event.\n\n  Includes a `clojure.data/diff` of the db, before vs after, showing\n  the changes caused by the event handler.\n\n  You'd typically want this interceptor after (to the right of) any\n  path interceptor.\n\n  Warning:  calling clojure.data/diff on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. See the todomvc example to see how to exclude interceptors from\n  production code."],"~$trim-v",["^ ","^3","~$re-frame.std-interceptors/trim-v","^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",52,"^K",1,"^L",52,"^M",12,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",52,"^K",6,"^L",52,"^M",12],"^O","An interceptor which removes the first element of the event vector,\n  allowing you to write more aesthetically pleasing db handlers. No\n  leading underscore on the event-v!\n  Your event handlers will look like this:\n\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)"],"~$db-handler->interceptor",["^ ","~:protocol-inline",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",76,"^K",7,"^L",76,"^M",30,"~:arglists",["~#list",["~$quote",["^U",[["~$handler-fn"]]]]],"^O","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n  (fn [db event]\n     ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^3","~$re-frame.std-interceptors/db-handler->interceptor","~:variadic",false,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",30,"~:method-params",["^U",[["^W"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^K",1,"^J",76,"^L",76,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^U",["^V",["^U",[["^W"]]]]],"^O","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n  (fn [db event]\n     ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$fx-handler->interceptor",["^ ","^S",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",98,"^K",7,"^L",98,"^M",30,"^T",["^U",["^V",["^U",[["^W"]]]]],"^O","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n  (fn [coeffects event]\n     {:db ...\n      :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^3","~$re-frame.std-interceptors/fx-handler->interceptor","^Y",false,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",30,"^Z",["^U",[["^W"]]],"^[",null,"^10",["^U",[null,null]],"^K",1,"^J",98,"^L",98,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["^W"]]]]],"^O","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n  (fn [coeffects event]\n     {:db ...\n      :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$ctx-handler->interceptor",["^ ","^S",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",121,"^K",7,"^L",121,"^M",31,"^T",["^U",["^V",["^U",[["^W"]]]]],"^O","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n     (fn [context]\n        (enqueue context [more interceptors]))"],"^3","~$re-frame.std-interceptors/ctx-handler->interceptor","^Y",false,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",31,"^Z",["^U",[["^W"]]],"^[",null,"^10",["^U",[null,null]],"^K",1,"^J",121,"^L",121,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["^W"]]]]],"^O","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n     (fn [context]\n        (enqueue context [more interceptors]))"],"~$path",["^ ","^S",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",136,"^K",7,"^L",136,"^M",11,"^T",["^U",["^V",["^U",[["~$&","~$args"]]]]],"^O","An interceptor factory which supplies a sub-path of `:db` to the handler.\n  It's action is somewhat annologous to `update-in`. It grafts the return\n  value from the handler back into db.\n\n  Usage:\n    (path :some :path)\n    (path [:some :path])\n    (path [:some :path] :to :here)\n    (path [:some :path] [:to] :here)\n\n  Notes:\n    1. cater for `path` appearing more than once in an interceptor chain.\n    2. `:effect` may not contain `:db` effect. Which means no change to\n       `:db` should be made.\n  ","~:top-fn",["^ ","^Y",true,"^11",0,"^Z",[["^U",["^18"]]],"^T",["^U",[["~$&","^18"]]],"^10",["^U",[null]]]],"^3","~$re-frame.std-interceptors/path","^Y",true,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",11,"^19",["^ ","^Y",true,"^11",0,"^Z",[["^U",["^18"]]],"^T",["^U",[["~$&","^18"]]],"^10",["^U",[null]]],"^Z",[["^U",["^18"]]],"^[",null,"^10",["^U",[null]],"^K",1,"^J",136,"^L",136,"^11",0,"^12",true,"^T",["^U",[["~$&","^18"]]],"^O","An interceptor factory which supplies a sub-path of `:db` to the handler.\n  It's action is somewhat annologous to `update-in`. It grafts the return\n  value from the handler back into db.\n\n  Usage:\n    (path :some :path)\n    (path [:some :path])\n    (path [:some :path] :to :here)\n    (path [:some :path] [:to] :here)\n\n  Notes:\n    1. cater for `path` appearing more than once in an interceptor chain.\n    2. `:effect` may not contain `:db` effect. Which means no change to\n       `:db` should be made.\n  "],"~$enrich",["^ ","^S",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",180,"^K",7,"^L",180,"^M",13,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^O","Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` inteceptor which is only about side effects, `enrich`\n  expects f to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them in a warning\n  down the bottom of the panel.\n\n  Almost any action (edit text, add new todo, remove a todo) requires a\n  complete reassesment of duplication errors and warnings. Eg: that edit\n  update might have introduced a new duplicate or removed one. Same with a\n  todo removal.\n\n  And to perform this enrichment, a function has to inspect all the todos,\n  possibly set flags on each, and set some overall list of duplicates.\n  And this duplication check might just be one check among many.\n\n  `f` would need to be both adding and removing the duplicate warnings.\n  By applying `f` in middleware, we keep the handlers simple and yet we\n  ensure this important step is not missed."],"^3","~$re-frame.std-interceptors/enrich","^Y",false,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",13,"^Z",["^U",[["~$f"]]],"^[",null,"^10",["^U",[null,null]],"^K",1,"^J",180,"^L",180,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^O","Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` inteceptor which is only about side effects, `enrich`\n  expects f to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them in a warning\n  down the bottom of the panel.\n\n  Almost any action (edit text, add new todo, remove a todo) requires a\n  complete reassesment of duplication errors and warnings. Eg: that edit\n  update might have introduced a new duplicate or removed one. Same with a\n  todo removal.\n\n  And to perform this enrichment, a function has to inspect all the todos,\n  possibly set flags on each, and set some overall list of duplicates.\n  And this duplication check might just be one check among many.\n\n  `f` would need to be both adding and removing the duplicate warnings.\n  By applying `f` in middleware, we keep the handlers simple and yet we\n  ensure this important step is not missed."],"~$after",["^ ","^S",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",219,"^K",7,"^L",219,"^M",12,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^O","Interceptor factory which runs a given function `f` in the \"after\"\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `effects` value of `:db` and the event. It's return\n  value is ignored so `f` can only side-effect.\n\n  Example use:\n     - `f` runs schema validation (reporting any errors found)\n     - `f` writes some aspect of db to localstorage."],"^3","~$re-frame.std-interceptors/after","^Y",false,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",12,"^Z",["^U",[["~$f"]]],"^[",null,"^10",["^U",[null,null]],"^K",1,"^J",219,"^L",219,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^O","Interceptor factory which runs a given function `f` in the \"after\"\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `effects` value of `:db` and the event. It's return\n  value is ignored so `f` can only side-effect.\n\n  Example use:\n     - `f` runs schema validation (reporting any errors found)\n     - `f` writes some aspect of db to localstorage."],"~$on-changes",["^ ","^S",null,"^N",["^ ","^I","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^J",240,"^K",8,"^L",240,"^M",18,"^T",["^U",["^V",["^U",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"^O","Interceptor factory which acts a bit like `reaction`  (but it flows into `db`, rather than out)\n  It observes N paths in `db` and if any of them test not indentical? to their previous value\n  (as a result of a handler being run) then it runs `f` to compute a new value, which is\n  then assoced into the given `out-path` within `db`.\n\n  Usage:\n\n  (defn my-f\n    [a-val b-val]\n    ... some computation on a and b in here)\n\n  (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  ","^19",["^ ","^Y",true,"^11",2,"^Z",[["^U",["~$f","^1@","^1A"]]],"^T",["^U",[["~$f","^1@","~$&","^1A"]]],"^10",["^U",[null]]]],"^3","~$re-frame.std-interceptors/on-changes","^Y",true,"^I","resources/public/js/compiled/out/re_frame/std_interceptors.cljc","^M",18,"^19",["^ ","^Y",true,"^11",2,"^Z",[["^U",["~$f","^1@","^1A"]]],"^T",["^U",[["~$f","^1@","~$&","^1A"]]],"^10",["^U",[null]]],"^Z",[["^U",["~$f","^1@","^1A"]]],"^[",null,"^10",["^U",[null]],"^K",1,"^J",240,"^L",240,"^11",2,"^12",true,"^T",["^U",[["~$f","^1@","~$&","^1A"]]],"^O","Interceptor factory which acts a bit like `reaction`  (but it flows into `db`, rather than out)\n  It observes N paths in `db` and if any of them test not indentical? to their previous value\n  (as a result of a handler being run) then it runs `f` to compute a new value, which is\n  then assoced into the given `out-path` within `db`.\n\n  Usage:\n\n  (defn my-f\n    [a-val b-val]\n    ... some computation on a and b in here)\n\n  (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  "]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:path","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:debug","~:trim-v","~:db-handler","~:event","~:after","~:id","~:effects","~:error","~:coeffects","~:re-frame-path/db-store","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:log"]],"~:order",["^1P","^1K","^1X","^1Y","^1N","^1O","^1H","^1J","^1G","^1U","^1L","^1M","^1S","^1I","^1Q","^1V","^1T","^1R","^1F","^1W"]],"^O","contains re-frame supplied, standard interceptors"]