["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.cofx","~:imports",null,"~:requires",["^ ","~$re-frame.db","^7","~$re-frame.interceptor","^8","~$re-frame.registrar","^9","~$re-frame.loggers","^:"],"~:uses",["^ ","~$console","^:","~$app-db","^7","~$->interceptor","^8","~$get-handler","^9","~$clear-handlers","^9","~$register-handler","^9"],"~:defs",["^ ","~$kind",["^ ","^3","~$re-frame.cofx/kind","~:file","resources/public/js/compiled/out/re_frame/cofx.cljc","~:line",11,"~:column",1,"~:end-line",11,"~:end-column",10,"~:meta",["^ ","^E","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/cofx.cljc","^F",11,"^G",6,"^H",11,"^I",10]],"~$register",["^ ","^3","~$re-frame.cofx/register","^E","resources/public/js/compiled/out/re_frame/cofx.cljc","^F",13,"^G",1,"^H",13,"^I",14,"^J",["^ ","^E","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/cofx.cljc","^F",13,"^G",6,"^H",13,"^I",14]],"~$inject-cofx",["^ ","~:protocol-inline",null,"^J",["^ ","^E","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/cofx.cljc","^F",18,"^G",7,"^H",18,"^I",18,"~:arglists",["~#list",["~$quote",["^P",[["~$id"],["^R","~$value"]]]]],"~:doc","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffect` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   ","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^P",[["^R"],["^R","^S"]]],"^O",["^P",[["^R"],["^R","^S"]]],"~:arglists-meta",["^P",[null,null]]]],"^3","~$re-frame.cofx/inject-cofx","^V",false,"^E","resources/public/js/compiled/out/re_frame/cofx.cljc","^I",18,"^U",["^ ","^V",false,"^W",2,"^X",["^P",[["^R"],["^R","^S"]]],"^O",["^P",[["^R"],["^R","^S"]]],"^Y",["^P",[null,null]]],"^X",["^P",[["^R"],["^R","^S"]]],"~:protocol-impl",null,"^Y",["^P",[null,null]],"^G",1,"^F",18,"^H",18,"^W",2,"~:fn-var",true,"^O",["^P",[["^R"],["^R","^S"]]],"^T","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffect` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   "],"~$inject-db",["^ ","^3","~$re-frame.cofx/inject-db","^E","resources/public/js/compiled/out/re_frame/cofx.cljc","^F",66,"^G",1,"^H",66,"^I",15,"^J",["^ ","^E","/mnt/data/Projects/Clojure/7mbookingsystem/resources/public/js/compiled/out/re_frame/cofx.cljc","^F",66,"^G",6,"^H",66,"^I",15]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:db","~:id","~:coeffects","~:cofx","~:before"]],"~:order",["^19","^17","^18","^1:","^16"]],"^T",null]